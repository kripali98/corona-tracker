var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import * as L from 'leaflet';
import 'leaflet.gridlayer.googlemutant';
import { updateGridLayer, createTileLayerComponent } from '@react-leaflet/core';
/**
 * Uses the GoogleLayer Leaflet plugin to create a googlemaps layer
 * Requires the Google Maps JS API to be loaded as a script tag.
 *
 * All options except `opacity` and `zIndex` are immutable once the layer has loaded with the exception
 *
 * Docs for L.GridLayer.GoogleMutant https://gitlab.com/IvanSanchez/Leaflet.GridLayer.GoogleMutant
 */
var GoogleLayer = createTileLayerComponent(function (_a, context) {
    var options = __rest(_a, []);
    return ({
        instance: L.gridLayer.googleMutant(__assign({}, options)),
        context: context,
    });
}, updateGridLayer);
export default GoogleLayer;
//# sourceMappingURL=GoogleMutant.js.map